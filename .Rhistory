filter(dep_time>120)
flights %>%
filter(dep_delay>120)
flights %>%
filter(month==1 & day==1)
url <- "https://www.imdb.com/chart/top/"
library(rvest)
library(tidyverse)
imdb <- read_html(url)
View(imdb)
table <- imdb %>%
html_element("table") %>%
html_table()
table <- imdb %>%
html_element("table") %>%
html_table()
url <- "https://www.imdb.com/chart/top/"
imdb <- read_html(url)
table <- imdb %>%
html_element("table") %>%
html_table()
table <- imdb %>%
html_elements("table") %>%
html_table()
View(imdb)
View(table)
ggplot ...
ggplot ... +
ggplot(
theme(
plot.title = element_text(
size = 14,
face = "bold",
hjust = 0.5
),
axis.title.x = element_text(
size = 12,
hjust = 0.5
),
axis.title.y = element_text(
size = 12,
hjust = 0.5
)
) +
labs(
y = "Number of \nobservations",
x = "City miles per gallon",
title = "Distribution of city miles per gallon"
)
ggplot(
ggplot(
theme(
plot.title = element_text(
size = 14,
face = "bold",
hjust = 0.5
),
axis.title.x = element_text(
size = 12,
hjust = 0.5
),
axis.title.y = element_text(
size = 12,
hjust = 0.5
)
) +
labs(
y = "Number of \nobservations",
x = "City miles per gallon",
title = "Distribution of city miles per gallon"
)
)
library(tidyverse)
library(ggplot2)
ggplot(
theme(
plot.title = element_text(
size = 14,
face = "bold",
hjust = 0.5
),
axis.title.x = element_text(
size = 12,
hjust = 0.5
),
axis.title.y = element_text(
size = 12,
hjust = 0.5
)
) +
labs(
y = "Number of \nobservations",
x = "City miles per gallon",
title = "Distribution of city miles per gallon"
)
)
rm(list=lm())
rm(lm=list())
cat("\014")
install.packages("faraway")
faraway::wafer
View(wafer)
df <- faraway::wafer
View(df)
setwd("D:/University/semester 2/exploratory data analysis/assignment 2")
knitr::opts_chunk$set(echo = TRUE)
train_df <- read.csv("train.csv")
test_df <- read.csv("test.csv")
df <- rbind(train_df,test_df)
train_df <- read.csv("train.csv")
test_df <- read.csv("test.csv")
df <- rbind(train_df,test_df)
dim(train_df)
head(train_df)
tail(train_df)
str(train_df)
colnames()
colnames(train_df)
dim(test_df)
head(test_df)
tail(test_df)
str(test_df)
colnames(test_df)
colSums(is.na(df))
na_count_sorted <- all %>%
summarise(across(everything(), ~sum(is.na(.)))) %>%  # Sum of NAs across all columns
pivot_longer(cols = everything(), names_to = "column_name", values_to = "na_count") %>%  # Convert to long format
filter(na_count > 0) %>%  # Filter columns with NA counts greater than 0
arrange(desc(na_count))
na_count_sorted <- df %>%
summarise(across(everything(), ~sum(is.na(.)))) %>%  # Sum of NAs across all columns
pivot_longer(cols = everything(), names_to = "column_name", values_to = "na_count") %>%  # Convert to long format
filter(na_count > 0) %>%  # Filter columns with NA counts greater than 0
arrange(desc(na_count))
library(ggplot2)
library(tidyverse)
na_count_sorted <- df %>%
summarise(across(everything(), ~sum(is.na(.)))) %>%  # Sum of NAs across all columns
pivot_longer(cols = everything(), names_to = "column_name", values_to = "na_count") %>%  # Convert to long format
filter(na_count > 0) %>%  # Filter columns with NA counts greater than 0
arrange(desc(na_count))
View(na_count_sorted)
View(na_count_sorted)
na_count_table <- df %>%
summarise(across(everything(), ~sum(is.na(.)))) %>%  # Sum of NAs across all columns
pivot_longer(cols = everything(), names_to = "column_names", values_to = "na_count") %>%  # Convert to long format
filter(na_count > 0) %>%  # Filter columns with NA counts greater than 0
arrange(desc(na_count))
view(df$PoolQC)
view(df$PoolQC)
# Calculate the number of NAs for each column
na_counts <- colSums(is.na(df))
# Filter columns that have any NAs
na_counts <- na_counts[na_counts > 0]
# Sort these counts in decreasing order
na_counts_sorted <- sort(na_counts, decreasing = TRUE)
# Display the sorted NA counts
na_counts_sorted
# Display the sorted NA counts
na_counts_sorted
df <- df[, na_proportion <= 0.5]
# Calculate the proportion of NA values for each column
na_proportion <- colSums(is.na(df)) / nrow(df)
# Subset the dataframe to keep only those columns with 50% or fewer NA values
df_clean <- df[, na_proportion <= 0.5]
View(df_clean)
# getting the rows of the df
n_rows <- nrow(df)
# Calculate the proportion of NA values for each column
na_count_table$na_proportion <- na_count_table$na_count / n_rows
# Filter to find variables with more than 50% NAs
variables_over_50pct_na <- na_count_table[na_count_table$na_proportion > 0.5, "column_names"]
View(variables_over_50pct_na)
# getting the rows of the df
n_rows <- nrow(df)
# Calculate the proportion of NA values for each column
na_count_table$na_proportion <- na_count_table$na_count / n_rows
# Filter to find variables with more than 50% NAs
variables_over_50pct_na <- na_count_table[na_count_table$na_proportion > 0.5, "column_names"]
# Drop the variables with more than 50% NAs
df_clean <- df %>%
select(-all_of(variables_over_50pct_na))
# getting the rows of the df
n_rows <- nrow(df)
# Calculate the proportion of NA values for each column
na_count_table$na_proportion <- na_count_table$na_count / n_rows
# Filter to find variables with more than 50% NAs
variables_over_50pct_na <- na_count_table[na_count_table$na_proportion > 0.5, "column_names"]
# Drop the variables with more than 50% NAs
df_clean <- df %>%
select(-all_of(as.vector(variables_over_50pct_na)))
# getting the rows of the df
n_rows <- nrow(df)
# Calculate the proportion of NA values for each column
na_count_table$na_proportion <- na_count_table$na_count / n_rows
# Filter to find variables with more than 50% NAs
variables_over_50pct_na <- na_count_table[na_count_table$na_proportion > 0.5, "column_names"]
# Drop the variables with more than 50% NAs
df_clean <- df %>%
select(-(as.vector(variables_over_50pct_na)))
df_clean <- df %>%
select(-all_of(variables_over_50pct_na))
# getting the rows of the df
n_rows <- nrow(df)
# Calculate the proportion of NA values for each column
na_count_table$na_proportion <- na_count_table$na_count / n_rows
# Filter to find variables with more than 50% NAs
variables_over_50pct_na <- na_count_table[na_count_table$na_proportion > 0.5, "column_names"] %>% as.vector()
#df_clean <- df %>%
# select(-all_of(variables_over_50pct_na))
df_clean <- df %>%
select(-variables_over_50pct_na)
df <- df[, -which(names(df) %in% variables_over_50pct_na)]
# getting the rows of the df
n_rows <- nrow(df)
# Calculate the proportion of NA values for each column
na_count_table$na_proportion <- na_count_table$na_count / n_rows
# Filter to find variables with more than 50% NAs
variables_over_50pct_na <- na_count_table[na_count_table$na_proportion > 0.5, "column_names"] %>% as.vector()
df_clean <- df[, -which(names(df) %in% variables_over_50pct_na)]
View(df_clean)
train_df <- read.csv("train.csv")
test_df <- read.csv("test.csv")
df <- rbind(train_df,test_df)
dim(train_df)
head(train_df)
tail(train_df)
str(train_df)
colnames(train_df)
dim(test_df)
head(test_df)
tail(test_df)
str(test_df)
colnames(test_df)
na_count_table <- df %>%
summarise(across(everything(), ~sum(is.na(.)))) %>%  # Sum of NAs across all columns
pivot_longer(cols = everything(), names_to = "column_names", values_to = "na_count") %>%  # Convert to long format
filter(na_count > 0) %>%  # Filter columns with NA counts greater than 0
arrange(desc(na_count))
# getting the rows of the df
n_rows <- nrow(df)
# Calculate the proportion of NA values for each column
na_count_table$na_proportion <- na_count_table$na_count / n_rows
# Filter to find variables with more than 50% NAs
variables_over_50pct_na <- na_count_table[na_count_table$na_proportion > 0.5, "column_names"] %>% as.vector()
View(variables_over_50pct_na)
df_clean <- df[, !colnames(df) %in% variables_over_50pct_na]
View(df_clean)
# getting the rows of the df
n_rows <- nrow(df)
# Calculate the proportion of NA values for each column
na_count_table$na_proportion <- na_count_table$na_count / n_rows
# Filter to find variables with more than 50% NAs
variables_over_50pct_na <- na_count_table[na_count_table$na_proportion > 0.5, "column_names"] %>% as.data.frame()
df_clean <- df[, !colnames(df) %in% variables_over_50pct_na]
View(df_clean)
# getting the rows of the df
n_rows <- nrow(df)
# Calculate the proportion of NA values for each column
na_count_table$na_proportion <- na_count_table$na_count / n_rows
# Filter to find variables with more than 50% NAs and keep it as a vector
variables_over_50pct_na <- na_count_table[na_count_table$na_proportion > 0.5, "column_names"]
# Ensure variables_over_50pct_na is a vector
variables_over_50pct_na <- as.vector(variables_over_50pct_na)
# Use this vector to exclude columns from df
df_clean <- df[, !colnames(df) %in% variables_over_50pct_na]
# Calculate the proportion of NA values for each column
na_count_table$na_proportion <- na_count_table$na_count / n_rows
# Filter to find variables with more than 50% NAs and ensure it remains a vector
variables_over_50pct_na <- na_count_table[na_count_table$na_proportion > 0.5, "column_names"]
# Make sure it's a vector
variables_over_50pct_na <- as.vector(variables_over_50pct_na)
# Debug: Print the vector to see what it contains
print(variables_over_50pct_na)
# Exclude the columns from df
df_clean <- df[, !colnames(df) %in% variables_over_50pct_na]
# Debug: Check how many columns are left
print(ncol(df_clean))
View(variables_over_50pct_na)
# Calculate the proportion of NA values for each column
na_count_table$na_proportion <- na_count_table$na_count / n_rows
# Filter to find variables with more than 50% NAs and ensure it remains a vector
variables_over_50pct_na <- na_count_table[na_count_table$na_proportion > 0.5, "column_names"]
# Make sure it's a vector
variables_over_50pct_na <- as.vector(variables_over_50pct_na)
# Debug: Print the vector to see what it contains
print(variables_over_50pct_na)
# Exclude the columns from df
df_clean <- df[, !col_names(df) %in% variables_over_50pct_na]
# Exclude the columns from df
df_clean <- df[, -which(names(df) %in% variables_over_50pct_na)]
# Exclude the columns from df
df_clean <- variables_over_50pct_na[, -which(names(df) %in% variables_over_50pct_na)]
# Calculate the proportion of NA values for each column
na_count_table$na_proportion <- na_count_table$na_count / n_rows
# Filter to find variables with more than 50% NAs and ensure it remains a vector
variables_over_50pct_na <- na_count_table[na_count_table$na_proportion > 0.5, "column_names"]
# # Make sure it's a vector
# variables_over_50pct_na <- as.vector(variables_over_50pct_na)
# Debug: Print the vector to see what it contains
print(variables_over_50pct_na)
# Exclude the columns from df
df_clean <-df %>%
select(-variables_over_50pct_na$)
# Calculate the proportion of NA values for each column
na_count_table$na_proportion <- na_count_table$na_count / n_rows
# Filter to find variables with more than 50% NAs and ensure it remains a vector
variables_over_50pct_na <- na_count_table[na_count_table$na_proportion > 0.5, "column_names"]
# # Make sure it's a vector
# variables_over_50pct_na <- as.vector(variables_over_50pct_na)
# Debug: Print the vector to see what it contains
print(variables_over_50pct_na)
# Exclude the columns from df
df_clean <-df %>%
select(-variables_over_50pct_na$column_names)
# Debug: Check how many columns are left
print(ncol(df_clean))
train_df <- read.csv("train.csv")
test_df <- read.csv("test.csv")
df <- rbind(train_df,test_df)
library(tidyverse)
library(ggplot2)
dim(train_df)
head(train_df)
tail(train_df)
str(train_df)
colnames(train_df)
dim(test_df)
head(test_df)
tail(test_df)
str(test_df)
colnames(test_df)
na_count_table <- df %>%
summarise(across(everything(), ~sum(is.na(.)))) %>%  # Sum of NAs across all columns
pivot_longer(cols = everything(), names_to = "column_names", values_to = "na_count") %>%  # Convert to long format
filter(na_count > 0) %>%  # Filter columns with NA counts greater than 0
arrange(desc(na_count))
# Calculate the proportion of NA values for each column
na_count_table$na_proportion <- na_count_table$na_count / n_rows
n_rows <- nrow(df)
# Calculate the proportion of NA values for each column
na_count_table$na_proportion <- na_count_table$na_count / n_rows
# Filter to find variables with more than 50% NAs and ensure it remains a vector
variables_over_50pct_na <- na_count_table[na_count_table$na_proportion > 0.5, "column_names"]
# Exclude the columns from df and save it in new variable called "df_clean"
df_clean <-df %>%
select(-variables_over_50pct_na$column_names)
df_clean[is.na(df_clean)] <- 0
df$MasVnrType[is.na(df$MasVnrType)] <- "None"
View(df_clean)
#number of rows
n_rows <- nrow(df)
# Calculate the proportion of NA values for each column
na_count_table$na_proportion <- na_count_table$na_count / n_rows
# Filter to find variables with more than 50% NAs and ensure it remains a vector
variables_over_50pct_na <- na_count_table[na_count_table$na_proportion > 0.5, "column_names"]
# Exclude the columns from df and save it in new variable called "df_clean"
df_clean <-df %>%
select(-variables_over_50pct_na$column_names)
#imputing 0 to the remaining NA values
df_clean[is.na(df_clean)] <- 0
df$MasVnrType[is.na(df$MasVnrType)] <- "None"
#one of the variable called "ID" is just the count,not an actual variable so getting rid of it
df_clean <- df_clean[-1]
View(na_count_table)
df_clean$Street
colsum(is.na(df_clean$Street))
colSums(is.na(df_clean$Street))
colSums(is.na(df_clean,df_clean$Street))
View(df_clean)
char_var <- names(df_clean[,sapply(df_clean, is.character)])
char_var
has_decimal <- sapply(df_clean, function(x) {
is.numeric(x) && any(abs(x - round(x)) > 0)
})
# Print columns with decimal values
print(names(df_clean)[has_decimal])
char_var <- names(df_clean[,sapply(df_clean, is.character)])
char_var
# Convert character variables to factors
df_clean[char_var] <- lapply(data[char_var], as.factor)
char_var <- names(df_clean[,sapply(df_clean, is.character)])
char_var
# Convert character variables to factors
df_clean[char_var] <- lapply(df[char_var], as.factor)
# Example dataset (replace this with your actual dataset)
data_anova <- df %>%
select(c(SalePrice, char_var))
data_anova <- df %>%
select(c(SalePrice, char_var))
# Perform ANOVA test
anova_result <- aov(SalePrice ~ ., data = data)
# Perform ANOVA test
anova_result <- aov(SalePrice ~ ., data = data_anova)
# Summarize ANOVA results
summary(anova_result)
na_count_table <- df %>%
summarise(across(everything(), ~sum(is.na(.)))) %>%  # Sum of NAs across all columns
pivot_longer(cols = everything(), names_to = "column_names", values_to = "na_count") %>%  # Convert to long format
filter(na_count > 0) %>%  # Filter columns with NA counts greater than 0
arrange(desc(na_count))
#number of rows
n_rows <- nrow(df)
# Calculate the proportion of NA values for each column
na_count_table$na_proportion <- na_count_table$na_count / n_rows
# Filter to find variables with more than 50% NAs and ensure it remains a vector
variables_over_50pct_na <- na_count_table[na_count_table$na_proportion > 0.5, "column_names"]
# Exclude the columns from df and save it in new variable called "df_clean"
df_clean <-df %>%
select(-variables_over_50pct_na$column_names)
#imputing 0 to the remaining NA values
df_clean[is.na(df_clean)] <- 0
df$MasVnrType[is.na(df$MasVnrType)] <- "None"
#one of the variable called "ID" is just the count,not an actual variable so getting rid of it
df_clean <- df_clean[-1]
View(na_count_table)
ggplot(df_clean, aes(x=OverallQual, y=SalePrice)) +
geom_point(alpha=0.6, color="#336699") +  # Sets point transparency and color
ggtitle("Scatter Plot of Overall Quality vs Sale Price") +
xlab("Overall Quality") +
ylab("Sale Price")
ggplot(df_clean, aes(x=OverallQual, y=SalePrice)) +
geom_point(alpha=0.6, color="darkgrey") +  # Sets point transparency and color
ggtitle("Scatter Plot of Overall Quality vs Sale Price") +
xlab("Overall Quality") +
ylab("Sale Price")
ggplot(df_clean, aes(x=OverallQual, y=SalePrice)) +
geom_point(alpha=0.6, color="red") +  # Sets point transparency and color
ggtitle("Scatter Plot of Overall Quality vs Sale Price") +
xlab("Overall Quality") +
ylab("Sale Price")
ggplot(df_clean, aes(x=OverallQual, y=SalePrice)) +
geom_point(alpha=0.6, color="red") +
scale_y_continuous(name = "Sale Price in $",
breaks = seq(min(df$SalePrice), max(df$SalePrice), by = 50000),
labels = scales::dollar_format())+
ggtitle("Scatter Plot of Overall Quality vs Sale Price") +
xlab("Overall Quality") +
ylab("Sale Price")
ggplot(df_clean, aes(x=OverallQual, y=SalePrice)) +
geom_point(alpha=0.6, color="red") +
scale_y_continuous(name = "Sale Price in $",
breaks = seq(0,800000, by = 10000),
labels = scales::dollar_format())+
ggtitle("Scatter Plot of Overall Quality vs Sale Price") +
xlab("Overall Quality") +
ylab("Sale Price")
ggplot(df_clean, aes(x=OverallQual, y=SalePrice)) +
geom_point(alpha=0.6, color="red") +
scale_y_continuous(name = "Sale Price in $",
breaks = seq(0,800000, by = 100000),
labels = scales::dollar_format())+
ggtitle("Scatter Plot of Overall Quality vs Sale Price") +
xlab("Overall Quality") +
ylab("Sale Price")
ggplot(df_clean, aes(x=OverallQual, y=SalePrice)) +
geom_point(alpha=0.6, color="red") +
scale_y_continuous(name = "Sale Price in $",
breaks = seq(0,800000, by = 100000),
labels = scales::dollar_format())+
ggtitle("Scatter Plot of Overall Quality vs Sale Price") +
xlab("Overall Quality") +
ylab("Sale Price")+
theme_minimal()
ggplot(df_clean, aes(x=Quality, y=SalePrice)) +
geom_point(alpha=0.6, color="red") +
scale_y_continuous(name = "Sale Price in $",
breaks = seq(0,800000, by = 100000),
labels = scales::dollar_format())+
ggtitle("Scatter Plot of Overall Quality vs Sale Price") +
xlab("Overall Quality") +
ylab("Sale Price")+
theme_minimal()
ggplot(df_clean, aes(x=Overall Quality, y=SalePrice)) +
ggplot(df_clean, aes(x=OverallQuality, y=SalePrice)) +
geom_point(alpha=0.6, color="red") +
scale_y_continuous(name = "Sale Price in $",
breaks = seq(0,800000, by = 100000),
labels = scales::dollar_format())+
ggtitle("Scatter Plot of Overall Quality vs Sale Price") +
xlab("Overall Quality") +
ylab("Sale Price")+
theme_minimal()
ggplot(df_clean, aes(x=OverallQual, y=SalePrice)) +
geom_point(alpha=0.6, color="red") +
scale_y_continuous(name = "Sale Price in $",
breaks = seq(0,800000, by = 100000),
labels = scales::dollar_format())+
ggtitle("Scatter Plot of Overall Quality vs Sale Price") +
xlab("Overall Quality") +
ylab("Sale Price")+
theme_minimal()
ggplot(df_clean, aes(x=OverallQual, y=SalePrice)) +
geom_point(alpha=0.6, color="red") +
scale_y_continuous(name = "Sale Price in $",
breaks = seq(0,800000, by = 100000),
labels = scales::dollar_format())+
ggtitle("Scatter Plot of Overall Quality vs Sale Price") +
xlab("Overall Quality") +
ylab("Sale Price")+
theme_minimal()
train_df <- read.csv("train.csv")
test_df <- read.csv("test.csv")
df <- rbind(train_df,test_df)
na_count_table <- df %>%
summarise(across(everything(), ~sum(is.na(.)))) %>%  # Sum of NAs across all columns
pivot_longer(cols = everything(), names_to = "column_names", values_to = "na_count") %>%  # Convert to long format
filter(na_count > 0) %>%  # Filter columns with NA counts greater than 0
arrange(desc(na_count))
View(na_count_table)
View(na_count_table)
View(df)
